/*     */ package mzm.gsp.exploit.main;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import mzm.gsp.GameServer;
/*     */ import mzm.gsp.activity.main.ActivityInterface;
/*     */ import mzm.gsp.activity.main.ActivityJoinResult;
/*     */ import mzm.gsp.award.main.AwardInterface;
/*     */ import mzm.gsp.award.main.AwardModel;
/*     */ import mzm.gsp.award.main.AwardReason;
/*     */ import mzm.gsp.exploit.SGetTargetAwardError;
/*     */ import mzm.gsp.exploit.SGetTargetAwardRep;
/*     */ import mzm.gsp.exploit.confbean.SExploitConst;
/*     */ import mzm.gsp.online.main.OnlineManager;
/*     */ import mzm.gsp.role.main.RoleInterface;
/*     */ import mzm.gsp.status.main.RoleStatusInterface;
/*     */ import mzm.gsp.tlog.LogReason;
/*     */ import mzm.gsp.util.LogicProcedure;
/*     */ import org.apache.log4j.Logger;
/*     */ import xbean.ExploitTargetData;
/*     */ import xdb.Lockeys;
/*     */ import xtable.User;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PCGetTargetAwardReq
/*     */   extends LogicProcedure
/*     */ {
/*     */   private final long roleId;
/*     */   private final int activityId;
/*     */   private final int targetId;
/*     */   
/*     */   public PCGetTargetAwardReq(long roleId, int activityId, int targetId)
/*     */   {
/*  35 */     this.roleId = roleId;
/*  36 */     this.activityId = activityId;
/*  37 */     this.targetId = targetId;
/*     */   }
/*     */   
/*     */   protected boolean processImp()
/*     */     throws Exception
/*     */   {
/*  43 */     if (!ExploitManager.isExploitOpen(this.roleId, true))
/*     */     {
/*  45 */       return false;
/*     */     }
/*  47 */     String userId = RoleInterface.getUserId(this.roleId);
/*     */     
/*  49 */     lock(Lockeys.get(User.getTable(), userId));
/*     */     
/*  51 */     RoleExploitInfo roleExploitInfo = new RoleExploitInfo(this.roleId, true);
/*     */     
/*  53 */     if (!RoleStatusInterface.checkCanSetStatus(this.roleId, 1131, true))
/*     */     {
/*  55 */       return false;
/*     */     }
/*     */     
/*  58 */     if (SExploitConst.getInstance().EXPLOIT_ACTIVITY_CFG_ID != this.activityId)
/*     */     {
/*  60 */       return false;
/*     */     }
/*     */     
/*  63 */     ActivityJoinResult res = ActivityInterface.canJoinAndCheckInitActivityData(userId, this.roleId, SExploitConst.getInstance().EXPLOIT_ACTIVITY_CFG_ID);
/*     */     
/*     */ 
/*  66 */     if (!res.isCanJoin())
/*     */     {
/*  68 */       GameServer.logger().error(String.format("[exploitTarget]PCGetTargetAwardReq.processImp@canJoinAndCheckInitActivityData error!res.reason=%d", new Object[] { Integer.valueOf(res.getReasonValue()) }));
/*     */       
/*     */ 
/*     */ 
/*  72 */       return false;
/*     */     }
/*     */     
/*  75 */     ExploitTargetData xData = roleExploitInfo.getTargetData(this.activityId, this.targetId);
/*  76 */     if (xData == null)
/*     */     {
/*  78 */       GameServer.logger().error(String.format("[exploitTarget]PCGetTargetAwardReq.processImp@ not own this target!|roleId=%d|targetId=%d", new Object[] { Long.valueOf(this.roleId), Integer.valueOf(this.targetId) }));
/*     */       
/*     */ 
/*  81 */       return false;
/*     */     }
/*     */     
/*  84 */     if (!setHandUpState(xData))
/*     */     {
/*  86 */       return false;
/*     */     }
/*     */     
/*  89 */     if (!doAward(userId))
/*     */     {
/*  91 */       return false;
/*     */     }
/*     */     
/*  94 */     sendTargetInfo(this.roleId, this.activityId, this.targetId, xData.getTarget_state(), xData.getTarget_param());
/*     */     
/*  96 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private boolean setHandUpState(ExploitTargetData xData)
/*     */   {
/* 107 */     int state = xData.getTarget_state();
/* 108 */     if (state != 2)
/*     */     {
/* 110 */       switch (state)
/*     */       {
/*     */       case 1: 
/* 113 */         sendWrongInfo(this.roleId, 1, new String[0]);
/* 114 */         break;
/*     */       case 3: 
/* 116 */         sendWrongInfo(this.roleId, 2, new String[0]);
/*     */       }
/*     */       
/* 119 */       GameServer.logger().error(String.format("[exploitTarget]PCGetTargetAwardReq.setState@state not finish state!|state=%d", new Object[] { Integer.valueOf(state) }));
/*     */       
/* 121 */       return false;
/*     */     }
/* 123 */     xData.setTarget_state(3);
/* 124 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private boolean doAward(String userId)
/*     */   {
/* 135 */     int awardId = ExploitManager.getTargetAwardId(this.activityId, this.targetId);
/* 136 */     if (awardId < 0)
/*     */     {
/* 138 */       GameServer.logger().error(String.format("[exploitTarget]PCGetTargetAwardReq.doAward@ awardId illegal!|roleId=%d|targetId=%d|awardId=%d", new Object[] { Long.valueOf(this.roleId), Integer.valueOf(this.targetId), Integer.valueOf(awardId) }));
/*     */       
/*     */ 
/*     */ 
/* 142 */       return false;
/*     */     }
/* 144 */     AwardReason reason = new AwardReason(LogReason.EXPLOIT_TARGET_AWARD);
/* 145 */     AwardModel awardModel = AwardInterface.award(awardId, userId, this.roleId, true, true, reason);
/* 146 */     if (awardModel == null)
/*     */     {
/* 148 */       GameServer.logger().error(String.format("[exploitTarget]PCGetTargetAwardReq.processImp@get award failed|roleId=%d|awardId=%d", new Object[] { Long.valueOf(this.roleId), Integer.valueOf(awardId) }));
/*     */       
/*     */ 
/* 151 */       return false;
/*     */     }
/* 153 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   void sendTargetInfo(long roleId, int activityId, int targetId, int state, int param)
/*     */   {
/* 167 */     int showParam = ExploitManager.getFinalShowParam(activityId, targetId, param);
/* 168 */     if (showParam < 0)
/*     */     {
/* 170 */       GameServer.logger().error(String.format("[exploitTarget]PCGetTargetAwardReq.synTargetInfo@ get showParam err!|roleId=%d|activityId=%d|targetId=%d|state=%d|param=%d", new Object[] { Long.valueOf(roleId), Integer.valueOf(targetId), Integer.valueOf(activityId), Integer.valueOf(state), Integer.valueOf(param) }));
/*     */       
/*     */ 
/*     */ 
/* 174 */       return;
/*     */     }
/* 176 */     SGetTargetAwardRep pro = new SGetTargetAwardRep();
/* 177 */     pro.activity_id = activityId;
/* 178 */     pro.target_activity_id = targetId;
/* 179 */     pro.target_state = state;
/* 180 */     pro.target_param = showParam;
/* 181 */     OnlineManager.getInstance().send(roleId, pro);
/* 182 */     if (GameServer.logger().isDebugEnabled())
/*     */     {
/* 184 */       GameServer.logger().debug(String.format("[exploitTarget]PCGetTargetAwardReq.synTargetInfo@pro info:|roleId=%d|activityId=%d|targetId=%d|state=%d|param=%d", new Object[] { Long.valueOf(roleId), Integer.valueOf(activityId), Integer.valueOf(targetId), Integer.valueOf(state), Integer.valueOf(pro.target_param) }));
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private void sendWrongInfo(long roleid, int error_code, String... params)
/*     */   {
/* 200 */     SGetTargetAwardError sGetTargetAwardError = new SGetTargetAwardError();
/* 201 */     sGetTargetAwardError.error_code = error_code;
/* 202 */     for (String param : params)
/*     */     {
/* 204 */       sGetTargetAwardError.params.add(param);
/*     */     }
/* 206 */     OnlineManager.getInstance().sendAtOnce(roleid, sGetTargetAwardError);
/*     */   }
/*     */ }


/* Location:              D:\桌面\山海\gsxdbdebug.jar!\mzm\gsp\exploit\main\PCGetTargetAwardReq.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */