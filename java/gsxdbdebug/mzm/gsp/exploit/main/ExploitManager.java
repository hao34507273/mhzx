/*     */ package mzm.gsp.exploit.main;
/*     */ 
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import java.util.Map.Entry;
/*     */ import mzm.gsp.GameServer;
/*     */ import mzm.gsp.activity.main.ActivityInterface;
/*     */ import mzm.gsp.activity.main.ActivityJoinResult;
/*     */ import mzm.gsp.award.main.AwardInterface;
/*     */ import mzm.gsp.award.main.AwardModel;
/*     */ import mzm.gsp.award.main.AwardReason;
/*     */ import mzm.gsp.exploit.ExploitTarget;
/*     */ import mzm.gsp.exploit.SGetStageAwardRep;
/*     */ import mzm.gsp.exploit.SSynExploitStagesInfo;
/*     */ import mzm.gsp.exploit.SSynExploitTargetInfo;
/*     */ import mzm.gsp.exploit.SSynExploitTargetsInfo;
/*     */ import mzm.gsp.exploit.confbean.SExploitConst;
/*     */ import mzm.gsp.exploit.confbean.SExploitStageInfoCfg;
/*     */ import mzm.gsp.exploit.confbean.SExploitStageMapCfg;
/*     */ import mzm.gsp.exploit.confbean.SExploitTargetCfg;
/*     */ import mzm.gsp.exploit.confbean.SExploitTargetMapCfg;
/*     */ import mzm.gsp.online.main.OnlineManager;
/*     */ import mzm.gsp.open.main.OpenInterface;
/*     */ import mzm.gsp.role.main.RoleInterface;
/*     */ import mzm.gsp.tlog.LogReason;
/*     */ import org.apache.log4j.Logger;
/*     */ import xbean.ExploitTargetData;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ExploitManager
/*     */ {
/*     */   static void init() {}
/*     */   
/*     */   static boolean validActivity(long roleid, int activityId)
/*     */   {
/*  44 */     if (!isExploitOpen(roleid, false))
/*     */     {
/*  46 */       return false;
/*     */     }
/*     */     
/*  49 */     String userId = RoleInterface.getUserId(roleid);
/*  50 */     ActivityJoinResult res = ActivityInterface.canJoinAndCheckInitActivityData(userId, roleid, activityId);
/*  51 */     if (!res.isCanJoin())
/*     */     {
/*  53 */       return false;
/*     */     }
/*  55 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static boolean validTarget(RoleExploitInfo roleExploitInfo, int activityId, int targetId)
/*     */   {
/*  68 */     int state = roleExploitInfo.getTargetState(activityId, targetId);
/*  69 */     return state == 1;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static boolean setParam(RoleExploitInfo roleExploitInfo, int activityId, int targetId, int param)
/*     */   {
/*  82 */     int state = roleExploitInfo.getTargetState(activityId, targetId);
/*  83 */     if (state != 1)
/*     */     {
/*  85 */       return false;
/*     */     }
/*  87 */     if (!roleExploitInfo.changeTarget(activityId, targetId, state, param))
/*     */     {
/*  89 */       return false;
/*     */     }
/*  91 */     synTargetInfo(roleExploitInfo.getRoleId(), activityId, targetId, state, param);
/*  92 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static boolean isExploitOpen(long roleId, boolean isSend)
/*     */   {
/* 102 */     if (!OpenInterface.getOpenStatus(332))
/*     */     {
/* 104 */       return false;
/*     */     }
/* 106 */     if (OpenInterface.isBanPlay(roleId, 332))
/*     */     {
/* 108 */       if (isSend)
/*     */       {
/* 110 */         OpenInterface.sendBanPlayMsg(roleId, 332);
/*     */       }
/* 112 */       return false;
/*     */     }
/* 114 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static void synAllTargets(RoleExploitInfo roleExploitInfo, int activityId)
/*     */   {
/* 124 */     SSynExploitTargetsInfo pro = new SSynExploitTargetsInfo();
/* 125 */     pro.activity_id = activityId;
/* 126 */     fillPTargets(roleExploitInfo.getRoleId(), activityId, pro.targets, roleExploitInfo.getAllTarget(activityId));
/* 127 */     OnlineManager.getInstance().send(roleExploitInfo.getRoleId(), pro);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static void synAllStages(RoleExploitInfo roleExploitInfo, int activityId)
/*     */   {
/* 137 */     SSynExploitStagesInfo pro = new SSynExploitStagesInfo();
/* 138 */     pro.activity_id = activityId;
/* 139 */     pro.finish_num = roleExploitInfo.getStageRate(activityId);
/* 140 */     fillPStages(roleExploitInfo.getRoleId(), activityId, pro.stages, roleExploitInfo.getAllStage(activityId));
/* 141 */     OnlineManager.getInstance().send(roleExploitInfo.getRoleId(), pro);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static void synTargetInfo(long roleId, int activityId, int targetId, int state, int param)
/*     */   {
/* 154 */     int showParam = getFinalShowParam(activityId, targetId, param);
/* 155 */     if (showParam < 0)
/*     */     {
/* 157 */       GameServer.logger().error(String.format("[exploitTarget]ExploitManager.synTargetInfo@ get showParam err!|roleId=%d|activityId=%d|targetId=%d|state=%d|param=%d", new Object[] { Long.valueOf(roleId), Integer.valueOf(targetId), Integer.valueOf(activityId), Integer.valueOf(state), Integer.valueOf(param) }));
/*     */       
/*     */ 
/*     */ 
/* 161 */       return;
/*     */     }
/* 163 */     SSynExploitTargetInfo pro = new SSynExploitTargetInfo();
/* 164 */     pro.activity_id = activityId;
/* 165 */     pro.target_activity_id = targetId;
/* 166 */     pro.target_param = showParam;
/* 167 */     OnlineManager.getInstance().send(roleId, pro);
/* 168 */     if (GameServer.logger().isDebugEnabled())
/*     */     {
/* 170 */       GameServer.logger().debug(String.format("[exploitTarget]ExploitManager.synTargetInfo@pro info:|roleId=%d|activityId=%d|targetId=%d|state=%d|param=%d", new Object[] { Long.valueOf(roleId), Integer.valueOf(activityId), Integer.valueOf(targetId), Integer.valueOf(state), Integer.valueOf(pro.target_param) }));
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static void synStageInfo(long roleId, int activityId, int needNum, int state)
/*     */   {
/* 187 */     SGetStageAwardRep pro = new SGetStageAwardRep();
/* 188 */     pro.activity_id = activityId;
/* 189 */     pro.need_num = needNum;
/* 190 */     pro.target_state = state;
/* 191 */     OnlineManager.getInstance().send(roleId, pro);
/* 192 */     if (GameServer.logger().isDebugEnabled())
/*     */     {
/* 194 */       GameServer.logger().debug(String.format("[exploitTarget]ExploitManager.synStageInfo@pro info:|roleId=%d|activityId=%d|needNum=%d|state=%d", new Object[] { Long.valueOf(roleId), Integer.valueOf(activityId), Integer.valueOf(needNum), Integer.valueOf(state) }));
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static void fillPTargets(long roleId, int activityId, Map<Integer, ExploitTarget> pTargets, Map<Integer, ExploitTargetData> xTargets)
/*     */   {
/* 217 */     for (Map.Entry<Integer, ExploitTargetData> entry : xTargets.entrySet())
/*     */     {
/* 219 */       int targetActivityId = ((Integer)entry.getKey()).intValue();
/* 220 */       ExploitTargetData exploitTargetData = (ExploitTargetData)entry.getValue();
/* 221 */       int showParam = getFinalShowParam(activityId, targetActivityId, exploitTargetData.getTarget_param());
/* 222 */       if (showParam < 0)
/*     */       {
/* 224 */         GameServer.logger().error(String.format("[exploitTarget]ExploitManager.fillPTargets@ get showParam failed!|roleId=%d|activityId=%d|targetId=%d|xParam=%d", new Object[] { Long.valueOf(roleId), Integer.valueOf(activityId), Integer.valueOf(targetActivityId), Integer.valueOf(exploitTargetData.getTarget_param()) }));
/*     */ 
/*     */       }
/*     */       else
/*     */       {
/*     */ 
/* 230 */         ExploitTarget pInfo = new ExploitTarget();
/* 231 */         pInfo.target_state = exploitTargetData.getTarget_state();
/* 232 */         pInfo.target_param = showParam;
/*     */         
/* 234 */         AwardReason reason = new AwardReason(LogReason.EXPLOIT_TARGET_CHECK_AWARD);
/* 235 */         reason.setJustQuery(true);
/* 236 */         AwardModel awardModel = AwardInterface.getRoleAwardModel(getTargetAwardId(activityId, targetActivityId), roleId, -1, reason);
/*     */         
/* 238 */         if (awardModel != null)
/*     */         {
/* 240 */           AwardInterface.fillAwardInfoBean(awardModel, pInfo.target_award_bean);
/*     */         }
/*     */         else
/*     */         {
/* 244 */           GameServer.logger().error(String.format("[exploitTarget]ExploitManager.fillPTargets@ no award model!|awardId=%d|roleId=%d|level=%d", new Object[] { Integer.valueOf(getTargetAwardId(activityId, targetActivityId)), Long.valueOf(roleId), Integer.valueOf(RoleInterface.getLevel(roleId)) }));
/*     */         }
/*     */         
/*     */ 
/*     */ 
/*     */ 
/* 250 */         pTargets.put(Integer.valueOf(targetActivityId), pInfo);
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static void fillPStages(long roleId, int activityId, Map<Integer, Integer> pStages, Map<Integer, Integer> xStages)
/*     */   {
/* 268 */     for (Map.Entry<Integer, Integer> entry : xStages.entrySet())
/*     */     {
/* 270 */       int needNum = ((Integer)entry.getKey()).intValue();
/* 271 */       int state = ((Integer)entry.getValue()).intValue();
/* 272 */       pStages.put(Integer.valueOf(needNum), Integer.valueOf(state));
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static SExploitTargetCfg getSExploitTargetCfg(int activityId, int targetId)
/*     */   {
/* 285 */     SExploitTargetMapCfg cfgActivityId = SExploitTargetMapCfg.get(activityId);
/* 286 */     if (cfgActivityId == null)
/*     */     {
/* 288 */       GameServer.logger().error(String.format("[exploitTarget]ExploitManager.getSExploitTargetCfg@ activityId not exist!|activityId=%d|activityId=%d", new Object[] { Integer.valueOf(activityId), Integer.valueOf(targetId) }));
/*     */       
/*     */ 
/*     */ 
/* 292 */       return null;
/*     */     }
/* 294 */     SExploitTargetCfg cfgTargetId = (SExploitTargetCfg)cfgActivityId.targetId2CfgMap.get(Integer.valueOf(targetId));
/* 295 */     if (cfgTargetId == null)
/*     */     {
/* 297 */       GameServer.logger().error(String.format("[exploitTarget]ExploitManager.getSExploitTargetCfg@ targetId not exist!|activityId=%d|targetId=%d", new Object[] { Integer.valueOf(activityId), Integer.valueOf(targetId) }));
/*     */     }
/*     */     
/*     */ 
/*     */ 
/* 302 */     return cfgTargetId;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static int getFinalShowParam(int activityId, int targetId, int xParam)
/*     */   {
/* 315 */     SExploitTargetCfg cfgTargetId = getSExploitTargetCfg(activityId, targetId);
/* 316 */     if (cfgTargetId == null)
/*     */     {
/* 318 */       return -1;
/*     */     }
/* 320 */     int num = cfgTargetId.needNum;
/* 321 */     if (xParam < 0)
/*     */     {
/* 323 */       return 0;
/*     */     }
/* 325 */     if (xParam > num)
/*     */     {
/* 327 */       return num;
/*     */     }
/* 329 */     return xParam;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static int getTargetAwardId(int activityId, int targetId)
/*     */   {
/* 341 */     SExploitTargetCfg cfgTargetId = getSExploitTargetCfg(activityId, targetId);
/* 342 */     if (cfgTargetId == null)
/*     */     {
/* 344 */       return -1;
/*     */     }
/* 346 */     return cfgTargetId.awardCfgid;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static SExploitStageInfoCfg getSExploitStageInfoCfg(int activityId, int targetNum)
/*     */   {
/* 358 */     SExploitStageMapCfg cfgActivityId = SExploitStageMapCfg.get(activityId);
/* 359 */     if (cfgActivityId == null)
/*     */     {
/* 361 */       GameServer.logger().error(String.format("[exploitStage]ExploitManager.getCSExploitStageInfoCfg@ activityId not exist!|activityId=%d|targetNum=%d", new Object[] { Integer.valueOf(activityId), Integer.valueOf(targetNum) }));
/*     */       
/*     */ 
/*     */ 
/* 365 */       return null;
/*     */     }
/* 367 */     SExploitStageInfoCfg cfgTargetId = (SExploitStageInfoCfg)cfgActivityId.needNum2CfgMap.get(Integer.valueOf(targetNum));
/* 368 */     if (cfgTargetId == null)
/*     */     {
/* 370 */       GameServer.logger().error(String.format("[exploitStage]ExploitManager.getCSExploitStageInfoCfg@ targetNum not exist!|activityId=%d|targetNum=%d", new Object[] { Integer.valueOf(activityId), Integer.valueOf(targetNum) }));
/*     */     }
/*     */     
/*     */ 
/*     */ 
/* 375 */     return cfgTargetId;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static int getStageAwardId(int activityId, int targetNum)
/*     */   {
/* 387 */     SExploitStageInfoCfg cfgTargetId = getSExploitStageInfoCfg(activityId, targetNum);
/* 388 */     if (cfgTargetId == null)
/*     */     {
/* 390 */       return -1;
/*     */     }
/* 392 */     return cfgTargetId.awardCfgid;
/*     */   }
/*     */   
/*     */   public static boolean checkAndUpdateTargetProgress(long roleId, int activityId, int targetId)
/*     */   {
/* 397 */     return checkAndUpdateTargetProgress(roleId, activityId, targetId, 0);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   public static boolean checkAndUpdateTargetProgress(long roleId, int activityId, int targetId, int finishTimes)
/*     */   {
/* 404 */     if (!validActivity(roleId, activityId))
/*     */     {
/* 406 */       return false;
/*     */     }
/*     */     
/* 409 */     return updateTargetProgress(roleId, activityId, targetId, finishTimes);
/*     */   }
/*     */   
/*     */   static boolean updateTargetProgress(long roleId, int activityId, int targetId, int finishTimes)
/*     */   {
/* 414 */     SExploitTargetCfg cfg = getSExploitTargetCfg(activityId, targetId);
/*     */     
/* 416 */     if (cfg == null)
/*     */     {
/* 418 */       return false;
/*     */     }
/*     */     
/* 421 */     if (cfg.needNum < 0)
/*     */     {
/* 423 */       return false;
/*     */     }
/*     */     
/* 426 */     RoleExploitInfo roleExploitInfo = new RoleExploitInfo(roleId, true);
/* 427 */     if (!roleExploitInfo.hasXData())
/*     */     {
/* 429 */       roleExploitInfo.createExploitInfo();
/*     */     }
/*     */     
/* 432 */     if (!validTarget(roleExploitInfo, activityId, targetId))
/*     */     {
/* 434 */       return false;
/*     */     }
/*     */     
/* 437 */     int xNum = roleExploitInfo.getTargetParam(activityId, targetId);
/* 438 */     int finalNum = finishTimes > 0 ? finishTimes : xNum + 1;
/* 439 */     setParam(roleExploitInfo, activityId, targetId, finalNum);
/*     */     
/* 441 */     if (finalNum >= cfg.needNum)
/*     */     {
/*     */ 
/* 444 */       if (!finishExploitTarget(roleExploitInfo, activityId, targetId))
/*     */       {
/* 446 */         return false;
/*     */       }
/*     */     }
/*     */     
/* 450 */     ExploitTLogManager.tLogFinishActivity(roleId, activityId, targetId, finalNum, cfg.needNum);
/* 451 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */   private static boolean finishExploitTarget(RoleExploitInfo roleExploitInfo, int activityId, int targetId)
/*     */   {
/* 457 */     ExploitTargetData xExploitTargetData = roleExploitInfo.getTargetData(activityId, targetId);
/* 458 */     if (xExploitTargetData == null)
/*     */     {
/* 460 */       return false;
/*     */     }
/*     */     
/* 463 */     xExploitTargetData.setTarget_state(2);
/*     */     
/*     */ 
/* 466 */     int stageRate = Math.min(roleExploitInfo.getStageRate(activityId) + 1, SExploitConst.getInstance().EXPLOIT_ACTIVITY_MAX_STAGE);
/*     */     
/* 468 */     if (stageRate != roleExploitInfo.getStageRate(activityId))
/*     */     {
/* 470 */       roleExploitInfo.setStageRate(activityId, stageRate);
/* 471 */       SExploitStageInfoCfg exploitStageInfoCfg = getSExploitStageInfoCfg(activityId, stageRate);
/* 472 */       if (exploitStageInfoCfg != null)
/*     */       {
/* 474 */         setFinishedState(roleExploitInfo, activityId, stageRate);
/*     */       }
/*     */     }
/*     */     
/* 478 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private static boolean setFinishedState(RoleExploitInfo xData, int activityId, int stageRate)
/*     */   {
/* 490 */     int state = xData.getStageData(activityId, stageRate).intValue();
/* 491 */     if (state != 1)
/*     */     {
/* 493 */       GameServer.logger().error(String.format("[exploit]ExploitManager.setFinishedState@state not finish state!|state=%d", new Object[] { Integer.valueOf(state) }));
/*     */       
/*     */ 
/* 496 */       return false;
/*     */     }
/*     */     
/* 499 */     xData.setStageState(activityId, stageRate, 2);
/*     */     
/* 501 */     ExploitTLogManager.tLogFinishStage(xData.getRoleId(), activityId, stageRate);
/* 502 */     return true;
/*     */   }
/*     */ }


/* Location:              D:\桌面\山海\gsxdbdebug.jar!\mzm\gsp\exploit\main\ExploitManager.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */