/*     */ package mzm.gsp.exploit.main;
/*     */ 
/*     */ import java.util.ArrayList;
/*     */ import mzm.gsp.GameServer;
/*     */ import mzm.gsp.activity.main.ActivityInterface;
/*     */ import mzm.gsp.activity.main.ActivityJoinResult;
/*     */ import mzm.gsp.award.main.AwardInterface;
/*     */ import mzm.gsp.award.main.AwardModel;
/*     */ import mzm.gsp.award.main.AwardReason;
/*     */ import mzm.gsp.exploit.SGetStageAwardError;
/*     */ import mzm.gsp.exploit.confbean.SExploitConst;
/*     */ import mzm.gsp.online.main.OnlineManager;
/*     */ import mzm.gsp.role.main.RoleInterface;
/*     */ import mzm.gsp.status.main.RoleStatusInterface;
/*     */ import mzm.gsp.tlog.LogReason;
/*     */ import mzm.gsp.util.LogicProcedure;
/*     */ import org.apache.log4j.Logger;
/*     */ import xdb.Lockeys;
/*     */ import xtable.User;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PCGetStageAwardReq
/*     */   extends LogicProcedure
/*     */ {
/*     */   private final long roleId;
/*     */   private final int activityId;
/*     */   private final int needNum;
/*     */   
/*     */   public PCGetStageAwardReq(long roleId, int activityId, int needNum)
/*     */   {
/*  34 */     this.roleId = roleId;
/*  35 */     this.activityId = activityId;
/*  36 */     this.needNum = needNum;
/*     */   }
/*     */   
/*     */   protected boolean processImp()
/*     */     throws Exception
/*     */   {
/*  42 */     if (!ExploitManager.isExploitOpen(this.roleId, true))
/*     */     {
/*  44 */       return false;
/*     */     }
/*  46 */     String userId = RoleInterface.getUserId(this.roleId);
/*     */     
/*  48 */     lock(Lockeys.get(User.getTable(), userId));
/*     */     
/*  50 */     RoleExploitInfo roleExploitInfo = new RoleExploitInfo(this.roleId, true);
/*     */     
/*  52 */     if (!RoleStatusInterface.checkCanSetStatus(this.roleId, 1131, true))
/*     */     {
/*  54 */       return false;
/*     */     }
/*     */     
/*  57 */     if (SExploitConst.getInstance().EXPLOIT_ACTIVITY_CFG_ID != this.activityId)
/*     */     {
/*  59 */       return false;
/*     */     }
/*     */     
/*  62 */     ActivityJoinResult res = ActivityInterface.canJoinAndCheckInitActivityData(userId, this.roleId, SExploitConst.getInstance().EXPLOIT_ACTIVITY_CFG_ID);
/*     */     
/*     */ 
/*  65 */     if (!res.isCanJoin())
/*     */     {
/*  67 */       GameServer.logger().error(String.format("[exploitStage]PCGetStageAwardReq.processImp@canJoinAndCheckInitActivityData error!res.reason=%d", new Object[] { Integer.valueOf(res.getReasonValue()) }));
/*     */       
/*     */ 
/*     */ 
/*  71 */       return false;
/*     */     }
/*     */     
/*  74 */     if (!setHandUpState(roleExploitInfo))
/*     */     {
/*  76 */       return false;
/*     */     }
/*     */     
/*  79 */     if (!doAward(userId))
/*     */     {
/*  81 */       return false;
/*     */     }
/*     */     
/*  84 */     ExploitManager.synStageInfo(this.roleId, this.activityId, this.needNum, roleExploitInfo.getStageData(this.activityId, this.needNum).intValue());
/*     */     
/*  86 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private boolean setHandUpState(RoleExploitInfo xData)
/*     */   {
/*  97 */     int state = xData.getStageData(this.activityId, this.needNum).intValue();
/*  98 */     if (state != 2)
/*     */     {
/* 100 */       switch (state)
/*     */       {
/*     */       case 1: 
/* 103 */         sendWrongInfo(this.roleId, 1, new String[0]);
/* 104 */         break;
/*     */       case 3: 
/* 106 */         sendWrongInfo(this.roleId, 2, new String[0]);
/*     */       }
/*     */       
/* 109 */       GameServer.logger().error(String.format("[exploitStage]PCGetStageAwardReq.setState@state not finish state!|state=%d", new Object[] { Integer.valueOf(state) }));
/*     */       
/* 111 */       return false;
/*     */     }
/* 113 */     xData.setStageState(this.activityId, this.needNum, 3);
/* 114 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private boolean doAward(String userId)
/*     */   {
/* 125 */     int awardId = ExploitManager.getStageAwardId(this.activityId, this.needNum);
/* 126 */     if (awardId < 0)
/*     */     {
/* 128 */       GameServer.logger().error(String.format("[exploitStage]PCGetStageAwardReq.doAward@ awardId illegal!|roleId=%d|needNum=%d|awardId=%d", new Object[] { Long.valueOf(this.roleId), Integer.valueOf(this.needNum), Integer.valueOf(awardId) }));
/*     */       
/*     */ 
/* 131 */       return false;
/*     */     }
/* 133 */     AwardReason reason = new AwardReason(LogReason.EXPLOIT_STAGE_AWARD);
/* 134 */     AwardModel awardModel = AwardInterface.awardFixAward(awardId, userId, this.roleId, true, true, reason);
/* 135 */     if (awardModel == null)
/*     */     {
/* 137 */       GameServer.logger().error(String.format("[exploitStage]PCGetStageAwardReq.processImp@get award failed|roleId=%d|awardId=%d", new Object[] { Long.valueOf(this.roleId), Integer.valueOf(awardId) }));
/*     */       
/*     */ 
/* 140 */       return false;
/*     */     }
/* 142 */     return true;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private void sendWrongInfo(long roleid, int error_code, String... params)
/*     */   {
/* 154 */     SGetStageAwardError sGetStageAwardError = new SGetStageAwardError();
/* 155 */     sGetStageAwardError.error_code = error_code;
/* 156 */     for (String param : params)
/*     */     {
/* 158 */       sGetStageAwardError.params.add(param);
/*     */     }
/* 160 */     OnlineManager.getInstance().sendAtOnce(roleid, sGetStageAwardError);
/*     */   }
/*     */ }


/* Location:              D:\桌面\山海\gsxdbdebug.jar!\mzm\gsp\exploit\main\PCGetStageAwardReq.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */