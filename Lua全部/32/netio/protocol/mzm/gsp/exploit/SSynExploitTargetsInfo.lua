local SSynExploitTargetsInfo = class("SSynExploitTargetsInfo")
SSynExploitTargetsInfo.TYPEID = 12616194
function SSynExploitTargetsInfo:ctor(activity_id, targets)
  self.id = 12616194
  self.activity_id = activity_id or nil
  self.targets = targets or {}
end
function SSynExploitTargetsInfo:marshal(os)
  os:marshalInt32(self.activity_id)
  local _size_ = 0
  for _, _ in pairs(self.targets) do
    _size_ = _size_ + 1
  end
  os:marshalCompactUInt32(_size_)
  for k, v in pairs(self.targets) do
    os:marshalInt32(k)
    v:marshal(os)
  end
end
function SSynExploitTargetsInfo:unmarshal(os)
  self.activity_id = os:unmarshalInt32()
  for _size_ = os:unmarshalCompactUInt32(), 1, -1 do
    local k = os:unmarshalInt32()
    local BeanClazz = require("netio.protocol.mzm.gsp.exploit.ExploitTarget")
    local v = BeanClazz.new()
    v:unmarshal(os)
    self.targets[k] = v
  end
end
function SSynExploitTargetsInfo:sizepolicy(size)
  return size <= 65535
end
return SSynExploitTargetsInfo
